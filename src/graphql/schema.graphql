# union AnimalUnion = Dog | Cat

interface Animal {
  animal: String
  name: String!
}

type Dog implements Animal {
  animal: String
  name: String!
  hair: String
}

type Cat implements Animal {
  animal: String
  name: String!
  paws: String
}

"""type Dog {
  animal: String
  name: String!
  hair: String
}

 type Cat {
  animal: String
  name: String!
  paws: String
} """

type Query {
  agent(id: ID!): User!
  agents(name: String, age: Int): [User]
  posts: [Post!]!
  post(id: ID!): Post!
  pictures: [Pictures!]!

  """getAnimal: AnimalUnion!"""
  getAnimal: Animal!

  multiply(value: Int!): Int
  cars: [String!]!
  msg(values: [String!]!): String
}

type Mutation {
  createAgent(data: CreateAgentInput!): User!
  createPost(title: String!, content: String!, status: PostStatus!): Post!
  deletePost(id: ID!): Boolean!
  deleteAgent(id: ID!): Boolean!
  updateAgent(id: ID!, data: UpdateAgentInput!): User!
}

enum AgentState {
  active
  not_active
  trainee
  guest
}

enum PostStatus {
  published
  draft
}

input CreateAgentInput {
  name: String!,
  age: Int!,
  married: Boolean
  status: AgentState
}

input UpdateAgentInput {
  name:String,
  age:Int,
  married: Boolean,
  average: Float
  status: AgentState
}

type Pictures {
  id: ID!
  path: String!
  author: User!
  post: Post!
}

type User {
  id: ID!
  name: String!
  age: Int
  married: Boolean!
  average: Float
  status: AgentState
  posts: [Post!]!
  pictures: [Pictures!]!
}

type Post {
  id: ID
  title: String!
  content: String!
  author: User!
  picture: Pictures!
  status: PostStatus
}
